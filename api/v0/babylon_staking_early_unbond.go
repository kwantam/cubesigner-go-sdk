package v0

import (
	"encoding/json"
	"github.com/lombard-finance/cubesigner-sdk/api"
)

// BabylonStakingEarlyUnbond struct for BabylonStakingEarlyUnbond
type BabylonStakingEarlyUnbond struct {
	ExplicitParams api.NullableBabylonStakingParams `json:"explicit_params,omitempty"`
	// The Schnorr public key (i.e., 32-byte X-coordinate) of the finality provider to which the stake is delegated.
	FinalityProviderPk string `json:"finality_provider_pk"`
	// The lock time used for the withdrawal output in the staking deposit transaction
	LockTime int32                `json:"lock_time"`
	Network  api.BabylonNetworkId `json:"network"`
	// The Schnorr public key (i.e., 32-byte X-coordinate) of the staker. This is the key that signs the slashing, withdrawal, and unbonding scripts.
	StakerPk string `json:"staker_pk"`
	// The parameter version to use. If `None`, uses the latest version.
	Version api.NullableInt32 `json:"version,omitempty"`
	// Transaction-id of the staking transaction to unbond
	Txid string `json:"txid"`
	// An optional lock height (in blocks) for this transaction. The resulting transaction cannot be mined before the specified block height.  CAUTION: the consensus committee software may not yet approve early unbonding transactions that specify a lock height.
	TxnLockHeight api.NullableInt32 `json:"txn_lock_height,omitempty"`
	// The value in sats that was staked in the deposit transaction
	Value int64 `json:"value"`
	// Transaction output index of the staking transaction to unbond. For staking transactions generated by CubeSigner, this will always be zero.
	Vout int32 `json:"vout"`
}

// NewBabylonStakingEarlyUnbond instantiates a new BabylonStakingEarlyUnbond object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBabylonStakingEarlyUnbond(finalityProviderPk string, lockTime int32, network api.BabylonNetworkId, stakerPk string, txid string, value int64, vout int32) *BabylonStakingEarlyUnbond {
	this := BabylonStakingEarlyUnbond{}
	this.FinalityProviderPk = finalityProviderPk
	this.LockTime = lockTime
	this.Network = network
	this.StakerPk = stakerPk
	this.Txid = txid
	this.Value = value
	this.Vout = vout
	return &this
}

// NewBabylonStakingEarlyUnbondWithDefaults instantiates a new BabylonStakingEarlyUnbond object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBabylonStakingEarlyUnbondWithDefaults() *BabylonStakingEarlyUnbond {
	this := BabylonStakingEarlyUnbond{}
	return &this
}

// GetExplicitParams returns the ExplicitParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BabylonStakingEarlyUnbond) GetExplicitParams() api.BabylonStakingParams {
	if o == nil || o.ExplicitParams.Get() == nil {
		var ret api.BabylonStakingParams
		return ret
	}
	return *o.ExplicitParams.Get()
}

// GetExplicitParamsOk returns a tuple with the ExplicitParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BabylonStakingEarlyUnbond) GetExplicitParamsOk() (*api.BabylonStakingParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExplicitParams.Get(), o.ExplicitParams.IsSet()
}

// HasExplicitParams returns a boolean if a field has been set.
func (o *BabylonStakingEarlyUnbond) HasExplicitParams() bool {
	if o != nil && o.ExplicitParams.IsSet() {
		return true
	}

	return false
}

// SetExplicitParams gets a reference to the given NullableBabylonStakingParams and assigns it to the ExplicitParams field.
func (o *BabylonStakingEarlyUnbond) SetExplicitParams(v api.BabylonStakingParams) {
	o.ExplicitParams.Set(&v)
}

// SetExplicitParamsNil sets the value for ExplicitParams to be an explicit nil
func (o *BabylonStakingEarlyUnbond) SetExplicitParamsNil() {
	o.ExplicitParams.Set(nil)
}

// UnsetExplicitParams ensures that no value is present for ExplicitParams, not even an explicit nil
func (o *BabylonStakingEarlyUnbond) UnsetExplicitParams() {
	o.ExplicitParams.Unset()
}

// GetFinalityProviderPk returns the FinalityProviderPk field value
func (o *BabylonStakingEarlyUnbond) GetFinalityProviderPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FinalityProviderPk
}

// GetFinalityProviderPkOk returns a tuple with the FinalityProviderPk field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbond) GetFinalityProviderPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinalityProviderPk, true
}

// SetFinalityProviderPk sets field value
func (o *BabylonStakingEarlyUnbond) SetFinalityProviderPk(v string) {
	o.FinalityProviderPk = v
}

// GetLockTime returns the LockTime field value
func (o *BabylonStakingEarlyUnbond) GetLockTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LockTime
}

// GetLockTimeOk returns a tuple with the LockTime field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbond) GetLockTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LockTime, true
}

// SetLockTime sets field value
func (o *BabylonStakingEarlyUnbond) SetLockTime(v int32) {
	o.LockTime = v
}

// GetNetwork returns the Network field value
func (o *BabylonStakingEarlyUnbond) GetNetwork() api.BabylonNetworkId {
	if o == nil {
		var ret api.BabylonNetworkId
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbond) GetNetworkOk() (*api.BabylonNetworkId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *BabylonStakingEarlyUnbond) SetNetwork(v api.BabylonNetworkId) {
	o.Network = v
}

// GetStakerPk returns the StakerPk field value
func (o *BabylonStakingEarlyUnbond) GetStakerPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StakerPk
}

// GetStakerPkOk returns a tuple with the StakerPk field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbond) GetStakerPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakerPk, true
}

// SetStakerPk sets field value
func (o *BabylonStakingEarlyUnbond) SetStakerPk(v string) {
	o.StakerPk = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BabylonStakingEarlyUnbond) GetVersion() int32 {
	if o == nil || o.Version.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BabylonStakingEarlyUnbond) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *BabylonStakingEarlyUnbond) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *BabylonStakingEarlyUnbond) SetVersion(v int32) {
	o.Version.Set(&v)
}

// SetVersionNil sets the value for Version to be an explicit nil
func (o *BabylonStakingEarlyUnbond) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *BabylonStakingEarlyUnbond) UnsetVersion() {
	o.Version.Unset()
}

// GetTxid returns the Txid field value
func (o *BabylonStakingEarlyUnbond) GetTxid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Txid
}

// GetTxidOk returns a tuple with the Txid field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbond) GetTxidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Txid, true
}

// SetTxid sets field value
func (o *BabylonStakingEarlyUnbond) SetTxid(v string) {
	o.Txid = v
}

// GetTxnLockHeight returns the TxnLockHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BabylonStakingEarlyUnbond) GetTxnLockHeight() int32 {
	if o == nil || o.TxnLockHeight.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TxnLockHeight.Get()
}

// GetTxnLockHeightOk returns a tuple with the TxnLockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BabylonStakingEarlyUnbond) GetTxnLockHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxnLockHeight.Get(), o.TxnLockHeight.IsSet()
}

// HasTxnLockHeight returns a boolean if a field has been set.
func (o *BabylonStakingEarlyUnbond) HasTxnLockHeight() bool {
	if o != nil && o.TxnLockHeight.IsSet() {
		return true
	}

	return false
}

// SetTxnLockHeight gets a reference to the given NullableInt32 and assigns it to the TxnLockHeight field.
func (o *BabylonStakingEarlyUnbond) SetTxnLockHeight(v int32) {
	o.TxnLockHeight.Set(&v)
}

// SetTxnLockHeightNil sets the value for TxnLockHeight to be an explicit nil
func (o *BabylonStakingEarlyUnbond) SetTxnLockHeightNil() {
	o.TxnLockHeight.Set(nil)
}

// UnsetTxnLockHeight ensures that no value is present for TxnLockHeight, not even an explicit nil
func (o *BabylonStakingEarlyUnbond) UnsetTxnLockHeight() {
	o.TxnLockHeight.Unset()
}

// GetValue returns the Value field value
func (o *BabylonStakingEarlyUnbond) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbond) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *BabylonStakingEarlyUnbond) SetValue(v int64) {
	o.Value = v
}

// GetVout returns the Vout field value
func (o *BabylonStakingEarlyUnbond) GetVout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vout
}

// GetVoutOk returns a tuple with the Vout field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbond) GetVoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vout, true
}

// SetVout sets field value
func (o *BabylonStakingEarlyUnbond) SetVout(v int32) {
	o.Vout = v
}

func (o BabylonStakingEarlyUnbond) MarshalJSON() ([]byte, error) {
	return json.Marshal(o.Serialize())
}

func (o BabylonStakingEarlyUnbond) Serialize() (toSerialize map[string]interface{}) {
	toSerialize = make(map[string]interface{})

	if o.ExplicitParams.IsSet() {
		toSerialize["explicit_params"] = o.ExplicitParams.Get()
	}
	if true {
		toSerialize["finality_provider_pk"] = o.FinalityProviderPk
	}
	if true {
		toSerialize["lock_time"] = o.LockTime
	}
	if true {
		toSerialize["network"] = o.Network
	}
	if true {
		toSerialize["staker_pk"] = o.StakerPk
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if true {
		toSerialize["txid"] = o.Txid
	}
	if o.TxnLockHeight.IsSet() {
		toSerialize["txn_lock_height"] = o.TxnLockHeight.Get()
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["vout"] = o.Vout
	}
	return
}

type NullableBabylonStakingEarlyUnbond struct {
	value *BabylonStakingEarlyUnbond
	isSet bool
}

func (v NullableBabylonStakingEarlyUnbond) Get() *BabylonStakingEarlyUnbond {
	return v.value
}

func (v *NullableBabylonStakingEarlyUnbond) Set(val *BabylonStakingEarlyUnbond) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonStakingEarlyUnbond) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonStakingEarlyUnbond) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonStakingEarlyUnbond(val *BabylonStakingEarlyUnbond) *NullableBabylonStakingEarlyUnbond {
	return &NullableBabylonStakingEarlyUnbond{value: val, isSet: true}
}

func (v NullableBabylonStakingEarlyUnbond) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonStakingEarlyUnbond) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
