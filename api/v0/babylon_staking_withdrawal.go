package v0

// BabylonStakingWithdrawal struct for BabylonStakingWithdrawal
type BabylonStakingWithdrawal struct {
	BabylonScriptData
	// The transaction fee value.
	Fee int64 `json:"fee"`
	// Determines whether the fee is a fixed fee in sats or a rate in sats per (estimated) virtual byte of transaction weight (i.e., sats per vb).
	FeeType FeeType `json:"fee_type"`
	// The withdrawal recipient, specified as a Bitcoin spend script.
	Recipient string `json:"recipient"`
	// The transaction-id of the staking transaction to withdraw from.
	TxId string `json:"txid"`
	// An optional lock height (in blocks) for this transaction. The resulting transaction cannot be mined before the specified block height.
	TxnLockHeight *int32 `json:"txn_lock_height,omitempty"`
	// The value in sats that is staked in the transaction being withdrawn.
	Value int64 `json:"value"`
	// The transaction output index of the staking transaction from which to withdraw. For staking transactions generated by CubeSigner, this will always be zero.
	Vout int32 `json:"vout"`
}

func NewBabylonStakingWithdrawal(scriptData BabylonScriptData, fee int64, feeType FeeType, recipient string, txId string, value int64, vout int32) *BabylonStakingWithdrawal {
	this := BabylonStakingWithdrawal{}
	this.BabylonScriptData = scriptData
	this.Fee = fee
	this.FeeType = feeType
	this.Recipient = recipient
	this.TxId = txId
	this.Value = value
	this.Vout = vout
	return &this
}

func NewBabylonStakingWithdrawalWithDefaults() *BabylonStakingWithdrawal {
	this := BabylonStakingWithdrawal{}
	return &this
}

func (o *BabylonStakingWithdrawal) GetFee() int64 {
	if o == nil {
		return 0
	}
	return o.Fee
}

func (o *BabylonStakingWithdrawal) GetFeeOk() (int64, bool) {
	if o == nil {
		return 0, false
	}
	return o.Fee, true
}

func (o *BabylonStakingWithdrawal) SetFee(v int64) {
	o.Fee = v
}

func (o *BabylonStakingWithdrawal) GetFeeType() FeeType {
	if o == nil {
		return ""
	}
	return o.FeeType
}

func (o *BabylonStakingWithdrawal) GetFeeTypeOk() (FeeType, bool) {
	if o == nil {
		return "", false
	}
	return o.FeeType, true
}

func (o *BabylonStakingWithdrawal) SetFeeType(v FeeType) {
	o.FeeType = v
}

func (o *BabylonStakingWithdrawal) GetRecipient() string {
	if o == nil {
		return ""
	}
	return o.Recipient
}

func (o *BabylonStakingWithdrawal) GetRecipientOk() (string, bool) {
	if o == nil {
		return "", false
	}
	return o.Recipient, true
}

func (o *BabylonStakingWithdrawal) SetRecipient(v string) {
	o.Recipient = v
}

func (o *BabylonStakingWithdrawal) GetTxId() string {
	if o == nil {
		return ""
	}
	return o.TxId
}

func (o *BabylonStakingWithdrawal) GetTxIdOk() (string, bool) {
	if o == nil {
		return "", false
	}
	return o.TxId, true
}

func (o *BabylonStakingWithdrawal) SetTxId(v string) {
	o.TxId = v
}

func (o *BabylonStakingWithdrawal) GetTxnLockHeight() *int32 {
	if o == nil {
		return nil
	}
	return o.TxnLockHeight
}

func (o *BabylonStakingWithdrawal) GetTxnLockHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxnLockHeight, true
}

func (o *BabylonStakingWithdrawal) SetTxnLockHeight(v *int32) {
	o.TxnLockHeight = v
}

func (o *BabylonStakingWithdrawal) GetValue() int64 {
	if o == nil {
		return 0
	}
	return o.Value
}

func (o *BabylonStakingWithdrawal) GetValueOk() (int64, bool) {
	if o == nil {
		return 0, false
	}
	return o.Value, true
}

func (o *BabylonStakingWithdrawal) SetValue(v int64) {
	o.Value = v
}

func (o *BabylonStakingWithdrawal) GetVout() int32 {
	if o == nil {
		return 0
	}
	return o.Vout
}

func (o *BabylonStakingWithdrawal) GetVoutOk() (int32, bool) {
	if o == nil {
		return 0, false
	}
	return o.Vout, true
}

func (o *BabylonStakingWithdrawal) SetVout(v int32) {
	o.Vout = v
}
