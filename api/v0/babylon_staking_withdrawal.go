package v0

import (
	"encoding/json"
	"github.com/lombard-finance/cubesigner-sdk/api"
)

// BabylonStakingWithdrawal struct for BabylonStakingWithdrawal
type BabylonStakingWithdrawal struct {
	ExplicitParams api.NullableBabylonStakingParams `json:"explicit_params,omitempty"`
	// The Schnorr public key (i.e., 32-byte X-coordinate) of the finality provider to which the stake is delegated.
	FinalityProviderPk string `json:"finality_provider_pk"`
	// The lock time used for the withdrawal output in the staking deposit transaction
	LockTime int32                `json:"lock_time"`
	Network  api.BabylonNetworkId `json:"network"`
	// The Schnorr public key (i.e., 32-byte X-coordinate) of the staker. This is the key that signs the slashing, withdrawal, and unbonding scripts.
	StakerPk string `json:"staker_pk"`
	// The parameter version to use. If `None`, uses the latest version.
	Version api.NullableInt32 `json:"version,omitempty"`
	// The transaction fee value. The `fee_type` field determines whether this is a fixed fee in sats or a rate in sats per (estimated) virtual byte of transaction weight (i.e., sats per vb).
	Fee     int64       `json:"fee"`
	FeeType api.FeeType `json:"fee_type"`
	// The withdrawal recipient, specified as a Bitcoin spend script
	Recipient string `json:"recipient"`
	// Transaction-id of the staking transaction to withdraw from
	Txid string `json:"txid"`
	// An optional lock height (in blocks) for this transaction. The resulting transaction cannot be mined before the specified block height.
	TxnLockHeight api.NullableInt32 `json:"txn_lock_height,omitempty"`
	// The value in sats that is staked in the transaction being withdrawn
	Value int64 `json:"value"`
	// Transaction output index of the staking transaction from which to withdraw. For staking transactions generated by CubeSigner, this will always be zero.
	Vout int32 `json:"vout"`
}

// NewBabylonStakingWithdrawal instantiates a new BabylonStakingWithdrawal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBabylonStakingWithdrawal(finalityProviderPk string, lockTime int32, network api.BabylonNetworkId, stakerPk string, fee int64, feeType api.FeeType, recipient string, txid string, value int64, vout int32) *BabylonStakingWithdrawal {
	this := BabylonStakingWithdrawal{}
	this.FinalityProviderPk = finalityProviderPk
	this.LockTime = lockTime
	this.Network = network
	this.StakerPk = stakerPk
	this.Fee = fee
	this.FeeType = feeType
	this.Recipient = recipient
	this.Txid = txid
	this.Value = value
	this.Vout = vout
	return &this
}

// NewBabylonStakingWithdrawalWithDefaults instantiates a new BabylonStakingWithdrawal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBabylonStakingWithdrawalWithDefaults() *BabylonStakingWithdrawal {
	this := BabylonStakingWithdrawal{}
	return &this
}

// GetExplicitParams returns the ExplicitParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BabylonStakingWithdrawal) GetExplicitParams() api.BabylonStakingParams {
	if o == nil || o.ExplicitParams.Get() == nil {
		var ret api.BabylonStakingParams
		return ret
	}
	return *o.ExplicitParams.Get()
}

// GetExplicitParamsOk returns a tuple with the ExplicitParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BabylonStakingWithdrawal) GetExplicitParamsOk() (*api.BabylonStakingParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExplicitParams.Get(), o.ExplicitParams.IsSet()
}

// HasExplicitParams returns a boolean if a field has been set.
func (o *BabylonStakingWithdrawal) HasExplicitParams() bool {
	if o != nil && o.ExplicitParams.IsSet() {
		return true
	}

	return false
}

// SetExplicitParams gets a reference to the given NullableBabylonStakingParams and assigns it to the ExplicitParams field.
func (o *BabylonStakingWithdrawal) SetExplicitParams(v api.BabylonStakingParams) {
	o.ExplicitParams.Set(&v)
}

// SetExplicitParamsNil sets the value for ExplicitParams to be an explicit nil
func (o *BabylonStakingWithdrawal) SetExplicitParamsNil() {
	o.ExplicitParams.Set(nil)
}

// UnsetExplicitParams ensures that no value is present for ExplicitParams, not even an explicit nil
func (o *BabylonStakingWithdrawal) UnsetExplicitParams() {
	o.ExplicitParams.Unset()
}

// GetFinalityProviderPk returns the FinalityProviderPk field value
func (o *BabylonStakingWithdrawal) GetFinalityProviderPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FinalityProviderPk
}

// GetFinalityProviderPkOk returns a tuple with the FinalityProviderPk field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetFinalityProviderPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinalityProviderPk, true
}

// SetFinalityProviderPk sets field value
func (o *BabylonStakingWithdrawal) SetFinalityProviderPk(v string) {
	o.FinalityProviderPk = v
}

// GetLockTime returns the LockTime field value
func (o *BabylonStakingWithdrawal) GetLockTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LockTime
}

// GetLockTimeOk returns a tuple with the LockTime field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetLockTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LockTime, true
}

// SetLockTime sets field value
func (o *BabylonStakingWithdrawal) SetLockTime(v int32) {
	o.LockTime = v
}

// GetNetwork returns the Network field value
func (o *BabylonStakingWithdrawal) GetNetwork() api.BabylonNetworkId {
	if o == nil {
		var ret api.BabylonNetworkId
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetNetworkOk() (*api.BabylonNetworkId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *BabylonStakingWithdrawal) SetNetwork(v api.BabylonNetworkId) {
	o.Network = v
}

// GetStakerPk returns the StakerPk field value
func (o *BabylonStakingWithdrawal) GetStakerPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StakerPk
}

// GetStakerPkOk returns a tuple with the StakerPk field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetStakerPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakerPk, true
}

// SetStakerPk sets field value
func (o *BabylonStakingWithdrawal) SetStakerPk(v string) {
	o.StakerPk = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BabylonStakingWithdrawal) GetVersion() int32 {
	if o == nil || o.Version.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BabylonStakingWithdrawal) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *BabylonStakingWithdrawal) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *BabylonStakingWithdrawal) SetVersion(v int32) {
	o.Version.Set(&v)
}

// SetVersionNil sets the value for Version to be an explicit nil
func (o *BabylonStakingWithdrawal) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *BabylonStakingWithdrawal) UnsetVersion() {
	o.Version.Unset()
}

// GetFee returns the Fee field value
func (o *BabylonStakingWithdrawal) GetFee() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetFeeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *BabylonStakingWithdrawal) SetFee(v int64) {
	o.Fee = v
}

// GetFeeType returns the FeeType field value
func (o *BabylonStakingWithdrawal) GetFeeType() api.FeeType {
	if o == nil {
		var ret api.FeeType
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetFeeTypeOk() (*api.FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *BabylonStakingWithdrawal) SetFeeType(v api.FeeType) {
	o.FeeType = v
}

// GetRecipient returns the Recipient field value
func (o *BabylonStakingWithdrawal) GetRecipient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *BabylonStakingWithdrawal) SetRecipient(v string) {
	o.Recipient = v
}

// GetTxid returns the Txid field value
func (o *BabylonStakingWithdrawal) GetTxid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Txid
}

// GetTxidOk returns a tuple with the Txid field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetTxidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Txid, true
}

// SetTxid sets field value
func (o *BabylonStakingWithdrawal) SetTxid(v string) {
	o.Txid = v
}

// GetTxnLockHeight returns the TxnLockHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BabylonStakingWithdrawal) GetTxnLockHeight() int32 {
	if o == nil || o.TxnLockHeight.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TxnLockHeight.Get()
}

// GetTxnLockHeightOk returns a tuple with the TxnLockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BabylonStakingWithdrawal) GetTxnLockHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxnLockHeight.Get(), o.TxnLockHeight.IsSet()
}

// HasTxnLockHeight returns a boolean if a field has been set.
func (o *BabylonStakingWithdrawal) HasTxnLockHeight() bool {
	if o != nil && o.TxnLockHeight.IsSet() {
		return true
	}

	return false
}

// SetTxnLockHeight gets a reference to the given NullableInt32 and assigns it to the TxnLockHeight field.
func (o *BabylonStakingWithdrawal) SetTxnLockHeight(v int32) {
	o.TxnLockHeight.Set(&v)
}

// SetTxnLockHeightNil sets the value for TxnLockHeight to be an explicit nil
func (o *BabylonStakingWithdrawal) SetTxnLockHeightNil() {
	o.TxnLockHeight.Set(nil)
}

// UnsetTxnLockHeight ensures that no value is present for TxnLockHeight, not even an explicit nil
func (o *BabylonStakingWithdrawal) UnsetTxnLockHeight() {
	o.TxnLockHeight.Unset()
}

// GetValue returns the Value field value
func (o *BabylonStakingWithdrawal) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *BabylonStakingWithdrawal) SetValue(v int64) {
	o.Value = v
}

// GetVout returns the Vout field value
func (o *BabylonStakingWithdrawal) GetVout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vout
}

// GetVoutOk returns a tuple with the Vout field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingWithdrawal) GetVoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vout, true
}

// SetVout sets field value
func (o *BabylonStakingWithdrawal) SetVout(v int32) {
	o.Vout = v
}

//func (o BabylonStakingWithdrawal) MarshalJSON() ([]byte, error) {
//	toSerialize := map[string]interface{}{}
//	if o.ExplicitParams.IsSet() {
//		toSerialize["explicit_params"] = o.ExplicitParams.Get()
//	}
//	if true {
//		toSerialize["finality_provider_pk"] = o.FinalityProviderPk
//	}
//	if true {
//		toSerialize["lock_time"] = o.LockTime
//	}
//	if true {
//		toSerialize["network"] = o.Network
//	}
//	if true {
//		toSerialize["staker_pk"] = o.StakerPk
//	}
//	if o.Version.IsSet() {
//		toSerialize["version"] = o.Version.Get()
//	}
//	if true {
//		toSerialize["fee"] = o.Fee
//	}
//	if true {
//		toSerialize["fee_type"] = o.FeeType
//	}
//	if true {
//		toSerialize["recipient"] = o.Recipient
//	}
//	if true {
//		toSerialize["txid"] = o.Txid
//	}
//	if o.TxnLockHeight.IsSet() {
//		toSerialize["txn_lock_height"] = o.TxnLockHeight.Get()
//	}
//	if true {
//		toSerialize["value"] = o.Value
//	}
//	if true {
//		toSerialize["vout"] = o.Vout
//	}
//	return json.Marshal(toSerialize)
//}

type NullableBabylonStakingWithdrawal struct {
	value *BabylonStakingWithdrawal
	isSet bool
}

func (v NullableBabylonStakingWithdrawal) Get() *BabylonStakingWithdrawal {
	return v.value
}

func (v *NullableBabylonStakingWithdrawal) Set(val *BabylonStakingWithdrawal) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonStakingWithdrawal) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonStakingWithdrawal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonStakingWithdrawal(val *BabylonStakingWithdrawal) *NullableBabylonStakingWithdrawal {
	return &NullableBabylonStakingWithdrawal{value: val, isSet: true}
}

func (v NullableBabylonStakingWithdrawal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonStakingWithdrawal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
