package v0

import (
	"encoding/json"
	"github.com/lombard-finance/cubesigner-sdk/api"
)

// BabylonStakingEarlyUnbondAllOf struct for BabylonStakingEarlyUnbondAllOf
type BabylonStakingEarlyUnbondAllOf struct {
	// Transaction-id of the staking transaction to unbond
	Txid string `json:"txid"`
	// An optional lock height (in blocks) for this transaction. The resulting transaction cannot be mined before the specified block height.  CAUTION: the consensus committee software may not yet approve early unbonding transactions that specify a lock height.
	TxnLockHeight api.NullableInt32 `json:"txn_lock_height,omitempty"`
	// The value in sats that was staked in the deposit transaction
	Value int64 `json:"value"`
	// Transaction output index of the staking transaction to unbond. For staking transactions generated by CubeSigner, this will always be zero.
	Vout int32 `json:"vout"`
}

// NewBabylonStakingEarlyUnbondAllOf instantiates a new BabylonStakingEarlyUnbondAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBabylonStakingEarlyUnbondAllOf(txid string, value int64, vout int32) *BabylonStakingEarlyUnbondAllOf {
	this := BabylonStakingEarlyUnbondAllOf{}
	this.Txid = txid
	this.Value = value
	this.Vout = vout
	return &this
}

// NewBabylonStakingEarlyUnbondAllOfWithDefaults instantiates a new BabylonStakingEarlyUnbondAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBabylonStakingEarlyUnbondAllOfWithDefaults() *BabylonStakingEarlyUnbondAllOf {
	this := BabylonStakingEarlyUnbondAllOf{}
	return &this
}

// GetTxid returns the Txid field value
func (o *BabylonStakingEarlyUnbondAllOf) GetTxid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Txid
}

// GetTxidOk returns a tuple with the Txid field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbondAllOf) GetTxidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Txid, true
}

// SetTxid sets field value
func (o *BabylonStakingEarlyUnbondAllOf) SetTxid(v string) {
	o.Txid = v
}

// GetTxnLockHeight returns the TxnLockHeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BabylonStakingEarlyUnbondAllOf) GetTxnLockHeight() int32 {
	if o == nil || o.TxnLockHeight.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TxnLockHeight.Get()
}

// GetTxnLockHeightOk returns a tuple with the TxnLockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BabylonStakingEarlyUnbondAllOf) GetTxnLockHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxnLockHeight.Get(), o.TxnLockHeight.IsSet()
}

// HasTxnLockHeight returns a boolean if a field has been set.
func (o *BabylonStakingEarlyUnbondAllOf) HasTxnLockHeight() bool {
	if o != nil && o.TxnLockHeight.IsSet() {
		return true
	}

	return false
}

// SetTxnLockHeight gets a reference to the given NullableInt32 and assigns it to the TxnLockHeight field.
func (o *BabylonStakingEarlyUnbondAllOf) SetTxnLockHeight(v int32) {
	o.TxnLockHeight.Set(&v)
}
// SetTxnLockHeightNil sets the value for TxnLockHeight to be an explicit nil
func (o *BabylonStakingEarlyUnbondAllOf) SetTxnLockHeightNil() {
	o.TxnLockHeight.Set(nil)
}

// UnsetTxnLockHeight ensures that no value is present for TxnLockHeight, not even an explicit nil
func (o *BabylonStakingEarlyUnbondAllOf) UnsetTxnLockHeight() {
	o.TxnLockHeight.Unset()
}

// GetValue returns the Value field value
func (o *BabylonStakingEarlyUnbondAllOf) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbondAllOf) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *BabylonStakingEarlyUnbondAllOf) SetValue(v int64) {
	o.Value = v
}

// GetVout returns the Vout field value
func (o *BabylonStakingEarlyUnbondAllOf) GetVout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vout
}

// GetVoutOk returns a tuple with the Vout field value
// and a boolean to check if the value has been set.
func (o *BabylonStakingEarlyUnbondAllOf) GetVoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vout, true
}

// SetVout sets field value
func (o *BabylonStakingEarlyUnbondAllOf) SetVout(v int32) {
	o.Vout = v
}

func (o BabylonStakingEarlyUnbondAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["txid"] = o.Txid
	}
	if o.TxnLockHeight.IsSet() {
		toSerialize["txn_lock_height"] = o.TxnLockHeight.Get()
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["vout"] = o.Vout
	}
	return json.Marshal(toSerialize)
}

type NullableBabylonStakingEarlyUnbondAllOf struct {
	value *BabylonStakingEarlyUnbondAllOf
	isSet bool
}

func (v NullableBabylonStakingEarlyUnbondAllOf) Get() *BabylonStakingEarlyUnbondAllOf {
	return v.value
}

func (v *NullableBabylonStakingEarlyUnbondAllOf) Set(val *BabylonStakingEarlyUnbondAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBabylonStakingEarlyUnbondAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBabylonStakingEarlyUnbondAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBabylonStakingEarlyUnbondAllOf(val *BabylonStakingEarlyUnbondAllOf) *NullableBabylonStakingEarlyUnbondAllOf {
	return &NullableBabylonStakingEarlyUnbondAllOf{value: val, isSet: true}
}

func (v NullableBabylonStakingEarlyUnbondAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBabylonStakingEarlyUnbondAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


